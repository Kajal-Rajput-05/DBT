---------------------------------------------------------------
Assignment : 1
---------------------------------------------------------------

mysql> show databases;
+--------------------+
| Database           |
+--------------------+
| erandol2           |
| information_schema |
| kharghar           |
| mysql              |
| performance_schema |
| sakila             |
| schoolmanagement   |
| shop               |
| sys                |
| world              |
+--------------------+
10 rows in set (0.00 sec)

mysql> show tables;
+------------------------------------------------------+
| Tables_in_mysql                                      |
+------------------------------------------------------+
| columns_priv                                         |
| component                                            |
+------------------------------------------------------+
38 rows in set (0.42 sec)

mysql> create database kharghar;
Query OK, 1 row affected (0.13 sec)

mysql> use kharghar;
Database changed

mysql> select user from user;
+------------------+
| user             |
+------------------+
| rohit            |
| kajal            |
| mysql.infoschema |
| mysql.session    |
| mysql.sys        |
| root             |
+------------------+
6 rows in set (0.00 sec)

mysql> grant all privileges on kharghar.* to kajal@localhost;
Query OK, 0 rows affected (0.01 sec)

mysql> use kharghar;
Database changed

mysql> show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| kharghar           |
| performance_schema |
+--------------------+
3 rows in set (0.35 sec)

mysql> show tables;
+--------------------+
| Tables_in_kharghar |
+--------------------+
| customers          |
| orders             |
| salespeople        |
+--------------------+
3 rows in set (0.09 sec)

mysql> insert into salespeople values(1001, 'Peel', 'London', .12);
Query OK, 1 row affected (0.38 sec)

mysql> insert into salespeople values(1002, 'Serres', 'San Jose', .13),(1004, 'Motika', 'London', .11);
Query OK, 2 rows affected (0.02 sec)
Records: 2  Duplicates: 0  Warnings: 0

mysql> insert into salespeople values(1007, 'Rifkin', 'Barcelona', .15),(1003, 'Axelrod', 'New York',
.10);
Query OK, 2 rows affected (0.02 sec)
Records: 2  Duplicates: 0  Warnings: 0

mysql> select * from salespeople;
+------+---------+-----------+------+
| Snum | Sname   | City      | Comm |
+------+---------+-----------+------+
| 1001 | Peel    | London    | 0.12 |
| 1002 | Serres  | San Jose  | 0.13 |
| 1004 | Motika  | London    | 0.11 |
| 1007 | Rifkin  | Barcelona | 0.15 |
| 1003 | Axelrod | New York  |  0.1 |
+------+---------+-----------+------+
5 rows in set (0.00 sec)

mysql> insert into customers values(2001, 'Hoffman', 'London', 100, 1001),
				   (2002, 'Giovanni', 'Rome', 200, 1003),
				   (2003, 'Liu', 'San Jose',200, 1002),
				   (2004, 'Grass', 'Berlin', 300, 1002),
				   (2006, 'Clemens', 'London',100, 1001),
				   (2008, 'Cisneros', 'San Jose', 300, 1007),
				   (2007, 'Pereira', 'Rome',100, 1004);

Query OK, 7 rows affected (0.01 sec)
Records: 7  Duplicates: 0  Warnings: 0

mysql> select * from customers;
+------+----------+----------+--------+------+
| Cnum | Cname    | City     | Rating | Snum |
+------+----------+----------+--------+------+
| 2001 | Hoffman  | London   |    100 | 1001 |
| 2002 | Giovanni | Rome     |    200 | 1003 |
| 2003 | Liu      | San Jose |    200 | 1002 |
| 2004 | Grass    | Berlin   |    300 | 1002 |
| 2006 | Clemens  | London   |    100 | 1001 |
| 2008 | Cisneros | San Jose |    300 | 1007 |
| 2007 | Pereira  | Rome     |    100 | 1004 |
+------+----------+----------+--------+------+
7 rows in set (0.00 sec)

mysql> insert into orders values(3001, 18.69, '1990-10-03', 2008, 1007),
				(3003, 767.19, '1990-10-03', 2001, 1001),
				(3002, 1900.10, '1990-10-03', 2007, 1004),
				(3005, 5160.45, '1990-10-03', 2003, 1002),
				(3006, 1098.16, '1990-10-03', 2008, 1007),
				(3009, 1713.23, '1990-10-04', 2002, 1003),
				(3007, 75.75, '1990-10-04', 2004, 1002),
				(3008, 4723.00, '1990-10-05',2006, 1001),
				(3010, 1309.95, '1990-10-06', 2004, 1002),
				(3011, 9891.88, '1990-10-06', 2006, 1001);

Query OK, 10 rows affected (0.37 sec)
Records: 10  Duplicates: 0  Warnings: 0

mysql> select * from orders;
+------+---------+------------+------+------+
| Onum | Amt     | Odate      | Cnum | Snum |
+------+---------+------------+------+------+
| 3001 |   18.69 | 1990-10-03 | 2008 | 1007 |
| 3003 |  767.19 | 1990-10-03 | 2001 | 1001 |
| 3002 |  1900.1 | 1990-10-03 | 2007 | 1004 |
| 3005 | 5160.45 | 1990-10-03 | 2003 | 1002 |
| 3006 | 1098.16 | 1990-10-03 | 2008 | 1007 |
| 3009 | 1713.23 | 1990-10-04 | 2002 | 1003 |
| 3007 |   75.75 | 1990-10-04 | 2004 | 1002 |
| 3008 |    4723 | 1990-10-05 | 2006 | 1001 |
| 3010 | 1309.95 | 1990-10-06 | 2004 | 1002 |
| 3011 | 9891.88 | 1990-10-06 | 2006 | 1001 |
+------+---------+------------+------+------+
10 rows in set (0.00 sec)

---------------------------------------------------------------
Assignment : 2
---------------------------------------------------------------

1) Which field of the Customers table is the primary key? 
Snum

2) What is the 4th column of the Customers table?
Rating 

3) What is another word for row?  For column? 
for row : tuple or records
for coloum : attributes or fields 

4) Why isn’t it possible to see the first five rows of a table? 
tables represent unordered sets. until and unless a column explicitly defines the ordering. 

---------------------------------------------------------------
Assignment : 3
---------------------------------------------------------------

1) Does ANSI recognize the data type DATE?
Datetime data types will allow dates in the Gregorian format to be stored in the date range 
0001-01-01 CE through 9999-12-31 CE.
The default string literal format, which is used for down-level clients, complies with the SQL standard
form that is defined as yyyy-MM-dd. This format is the same as the ISO 8601 definition for DATE.

2) Which subdivision of SQL is used to insert values in tables? 
INSERT : This helps insert data into a table, from DML (Data Manipulation Language)

---------------------------------------------------------------
Assignment : 4
---------------------------------------------------------------

1) Write a select command that produces the order number, amount, and date for all 
rows in the Orders table. 
mysql> select Onum, Amt, Odate from orders;
+------+---------+------------+
| Onum | Amt     | Odate      |
+------+---------+------------+
| 3001 |   18.69 | 1990-10-03 |
| 3003 |  767.19 | 1990-10-03 |
| 3002 |  1900.1 | 1990-10-03 |
| 3005 | 5160.45 | 1990-10-03 |
| 3006 | 1098.16 | 1990-10-03 |
| 3009 | 1713.23 | 1990-10-04 |
| 3007 |   75.75 | 1990-10-04 |
| 3008 |    4723 | 1990-10-05 |
| 3010 | 1309.95 | 1990-10-06 |
| 3011 | 9891.88 | 1990-10-06 |
+------+---------+------------+
10 rows in set (0.01 sec)

2) Write a query that produces all rows from the Customers table for which the 
salesperson’s number is 1001. 
mysql> select * from salespeople where Snum=1001;
+------+-------+--------+------+
| Snum | Sname | City   | Comm |
+------+-------+--------+------+
| 1001 | Peel  | London | 0.12 |
+------+-------+--------+------+
1 row in set (0.01 sec)

3) Write a query that displays the Salespeople table with the columns in the 
following order: city, sname, snum, comm. 
mysql> select City, Sname, Snum, Comm from salespeople;
+-----------+---------+------+------+
| City      | Sname   | Snum | Comm |
+-----------+---------+------+------+
| London    | Peel    | 1001 | 0.12 |
| San Jose  | Serres  | 1002 | 0.13 |
| London    | Motika  | 1004 | 0.11 |
| Barcelona | Rifkin  | 1007 | 0.15 |
| New York  | Axelrod | 1003 |  0.1 |
+-----------+---------+------+------+
5 rows in set (0.00 sec)

4) Write a select command that produces the rating followed by the name of each 
customer in San Jose. 
mysql> select Cname, Rating from customers where City='San Jose';
+----------+--------+
| Cname    | Rating |
+----------+--------+
| Liu      |    200 |
| Cisneros |    300 |
+----------+--------+
2 rows in set (0.10 sec)

5) Write a query that will produce the snum values of all salespeople (suppress the 
duplicates) with orders in the Orders table.
mysql> select DISTINCT Snum from salespeople;
+------+
| Snum |
+------+
| 1001 |
| 1002 |
| 1004 |
| 1007 |
| 1003 |
+------+
5 rows in set (0.12 sec)

---------------------------------------------------------------
Assignment : 5
---------------------------------------------------------------

1) Write a query that will give you all orders for more than Rs. 1,000.   
mysql> select * from orders where Amt>1000;
+------+---------+------------+------+------+
| Onum | Amt     | Odate      | Cnum | Snum |
+------+---------+------------+------+------+
| 3002 |  1900.1 | 1990-10-03 | 2007 | 1004 |
| 3005 | 5160.45 | 1990-10-03 | 2003 | 1002 |
| 3006 | 1098.16 | 1990-10-03 | 2008 | 1007 |
| 3009 | 1713.23 | 1990-10-04 | 2002 | 1003 |
| 3008 |    4723 | 1990-10-05 | 2006 | 1001 |
| 3010 | 1309.95 | 1990-10-06 | 2004 | 1002 |
| 3011 | 9891.88 | 1990-10-06 | 2006 | 1001 |
+------+---------+------------+------+------+
7 rows in set (0.01 sec)

2) Write a query that will give you the names and cities of all salespeople in 
London with a commission above .10. 
mysql> select Sname from salespeople where city='London' AND Comm>.10;
+--------+
| Sname  |
+--------+
| Peel   |
| Motika |
+--------+
2 rows in set (0.01 sec)  

3) Write a query on the Customers table whose output will exclude all customers 
with a rating <= 100, unless they are located in Rome. 
mysql> select * from customers where rating <=100 OR city = 'Rome';
+------+----------+--------+--------+------+
| Cnum | Cname    | City   | Rating | Snum |
+------+----------+--------+--------+------+
| 2001 | Hoffman  | London |    100 | 1001 |
| 2002 | Giovanni | Rome   |    200 | 1003 |
| 2006 | Clemens  | London |    100 | 1001 |
| 2007 | Pereira  | Rome   |    100 | 1004 |
+------+----------+--------+--------+------+
4 rows in set (0.00 sec)
  

4) What will be the output from the following query?    
mysql> select * from orders where (Amt<1000 OR NOT (Odate = '1990-10-03'AND Cnum >2003));
+------+---------+------------+------+------+
| Onum | Amt     | Odate      | Cnum | Snum |
+------+---------+------------+------+------+
| 3001 |   18.69 | 1990-10-03 | 2008 | 1007 |
| 3003 |  767.19 | 1990-10-03 | 2001 | 1001 |
| 3005 | 5160.45 | 1990-10-03 | 2003 | 1002 |
| 3009 | 1713.23 | 1990-10-04 | 2002 | 1003 |
| 3007 |   75.75 | 1990-10-04 | 2004 | 1002 |
| 3008 |    4723 | 1990-10-05 | 2006 | 1001 |
| 3010 | 1309.95 | 1990-10-06 | 2004 | 1002 |
| 3011 | 9891.88 | 1990-10-06 | 2006 | 1001 |
+------+---------+------------+------+------+
8 rows in set (0.01 sec)

5) What will be the output of the following query?     
mysql> select * from orders where NOT((Odate = '1990-10-03' OR Snum > 1006)AND Amt >=1500);
+------+---------+------------+------+------+
| Onum | Amt     | Odate      | Cnum | Snum |
+------+---------+------------+------+------+
| 3001 |   18.69 | 1990-10-03 | 2008 | 1007 |
| 3003 |  767.19 | 1990-10-03 | 2001 | 1001 |
| 3006 | 1098.16 | 1990-10-03 | 2008 | 1007 |
| 3009 | 1713.23 | 1990-10-04 | 2002 | 1003 |
| 3007 |   75.75 | 1990-10-04 | 2004 | 1002 |
| 3008 |    4723 | 1990-10-05 | 2006 | 1001 |
| 3010 | 1309.95 | 1990-10-06 | 2004 | 1002 |
| 3011 | 9891.88 | 1990-10-06 | 2006 | 1001 |
+------+---------+------------+------+------+
8 rows in set (0.00 sec)

6) What is a simpler way to write this query?   
mysql> Select snum, sname, city, comm From Salespeople
    -> where (comm > .12 OR comm <.14);
+------+---------+-----------+------+
| snum | sname   | city      | comm |
+------+---------+-----------+------+
| 1001 | Peel    | London    | 0.12 |
| 1002 | Serres  | San Jose  | 0.13 |
| 1004 | Motika  | London    | 0.11 |
| 1007 | Rifkin  | Barcelona | 0.15 |
| 1003 | Axelrod | New York  |  0.1 |
+------+---------+-----------+------+
5 rows in set (0.00 sec)

---------------------------------------------------------------
Assignment : 6
---------------------------------------------------------------

1) Write two different queries that would produce all orders taken on October 3rd or 
4th, 1990. 
mysql> select * from orders where Odate='1990-10-04';
+------+---------+------------+------+------+
| Onum | Amt     | Odate      | Cnum | Snum |
+------+---------+------------+------+------+
| 3009 | 1713.23 | 1990-10-04 | 2002 | 1003 |
| 3007 |   75.75 | 1990-10-04 | 2004 | 1002 |
+------+---------+------------+------+------+
2 rows in set (0.00 sec)

2) Write a query that selects all of the customers serviced by Peel or Motika. 
(Hint: the snum field relates the two tables to one another).  
mysql> select * from customers where snum =1001 OR snum =1004;
+------+---------+--------+--------+------+
| Cnum | Cname   | City   | Rating | Snum |
+------+---------+--------+--------+------+
| 2001 | Hoffman | London |    100 | 1001 |
| 2006 | Clemens | London |    100 | 1001 |
| 2007 | Pereira | Rome   |    100 | 1004 |
+------+---------+--------+--------+------+
3 rows in set (0.00 sec)

3) Write a query that will produce all the customers whose names begin with a letter 
from ‘A’ to ‘G’. 
mysql> select * from customers where Cname like 'A%' OR cname like 'G%';
mysql> select * from customers where cname>='A' and cname<'B' OR cname>='G'and cname<'H';
+------+----------+--------+--------+------+
| Cnum | Cname    | City   | Rating | Snum |
+------+----------+--------+--------+------+
| 2002 | Giovanni | Rome   |    200 | 1003 |
| 2004 | Grass    | Berlin |    300 | 1002 |
+------+----------+--------+--------+------+
2 rows in set (0.00 sec)

4) Write a query that selects all customers whose names begin with the letter ‘C’. 
mysql> select * from customers where Cname like 'C%';
mysql> select * from customers where cname>='C' and cname<'D';
+------+----------+----------+--------+------+
| Cnum | Cname    | City     | Rating | Snum |
+------+----------+----------+--------+------+
| 2006 | Clemens  | London   |    100 | 1001 |
| 2008 | Cisneros | San Jose |    300 | 1007 |
+------+----------+----------+--------+------+
2 rows in set (0.00 sec)

5) Write a query that selects all orders except those with zeroes or NULLs in the amt 
field. 
mysql> select * from orders where Amt != NULL OR amt != 0;
+------+---------+------------+------+------+
| Onum | Amt     | Odate      | Cnum | Snum |
+------+---------+------------+------+------+
| 3001 |   18.69 | 1990-10-03 | 2008 | 1007 |
| 3003 |  767.19 | 1990-10-03 | 2001 | 1001 |
| 3002 |  1900.1 | 1990-10-03 | 2007 | 1004 |
| 3005 | 5160.45 | 1990-10-03 | 2003 | 1002 |
| 3006 | 1098.16 | 1990-10-03 | 2008 | 1007 |
| 3009 | 1713.23 | 1990-10-04 | 2002 | 1003 |
| 3007 |   75.75 | 1990-10-04 | 2004 | 1002 |
| 3008 |    4723 | 1990-10-05 | 2006 | 1001 |
| 3010 | 1309.95 | 1990-10-06 | 2004 | 1002 |
| 3011 | 9891.88 | 1990-10-06 | 2006 | 1001 |
+------+---------+------------+------+------+
10 rows in set (0.00 sec)

---------------------------------------------------------------
Assignment : 7
---------------------------------------------------------------

1) Write a query that counts all orders for October 3. 
mysql> select * from orders where Odate = '1990-10-03';
+------+---------+------------+------+------+
| Onum | Amt     | Odate      | Cnum | Snum |
+------+---------+------------+------+------+
| 3001 |   18.69 | 1990-10-03 | 2008 | 1007 |
| 3003 |  767.19 | 1990-10-03 | 2001 | 1001 |
| 3002 |  1900.1 | 1990-10-03 | 2007 | 1004 |
| 3005 | 5160.45 | 1990-10-03 | 2003 | 1002 |
| 3006 | 1098.16 | 1990-10-03 | 2008 | 1007 |
+------+---------+------------+------+------+
5 rows in set (0.04 sec)

2) Write a query that counts the number of different non-NULL city values in the Customers table. 
mysql> SELECT * FROM customers WHERE city != NULL;
Empty set (0.00 sec)

3) Write a query that selects each customer’s smallest order. 
mysql> select min(amt) from orders group by cnum;
+----------+
| min(amt) |
+----------+
|    18.69 |
|   767.19 |
|   1900.1 |
|  5160.45 |
|  1713.23 |
|    75.75 |
|     4723 |
+----------+
7 rows in set (0.01 sec)

4) Write a query that selects the first customer, in alphabetical order, whose name 
begins with G. 
mysql> select * from customers where cname like'G%' order by cname;
+------+----------+--------+--------+------+
| Cnum | Cname    | City   | Rating | Snum |
+------+----------+--------+--------+------+
| 2002 | Giovanni | Rome   |    200 | 1003 |
| 2004 | Grass    | Berlin |    300 | 1002 |
+------+----------+--------+--------+------+
2 rows in set (0.00 sec)

5) Write a query that selects the highest rating in each city. 
mysql> select max(rating) from customers;
+-------------+
| max(rating) |
+-------------+
|         300 |
+-------------+
1 row in set (0.01 sec)

6) Write a query that counts the number of salespeople registering orders for each day. 
(If a salesperson has more than one order on a given day, he or she should be counted only once.). 
mysql> select count(odate)||'SRO' "TOTAL", odate from orders group by odate;
+-----------------------------+------------+
| count(odate)||'SRO' "TOTAL" | odate      |
+-----------------------------+------------+
|                           1 | 1990-10-03 |
|                           1 | 1990-10-04 |
|                           1 | 1990-10-05 |
|                           1 | 1990-10-06 |
+-----------------------------+------------+
4 rows in set, 1 warning (0.10 sec)

---------------------------------------------------------------
Assignment : 8
---------------------------------------------------------------

1) Assume each salesperson has a 12% commission. Write a query on the orders 
table that will produce the order number, the salesperson number, and the amount 
of the salesperson’s commission for that order. 
mysql> select onum, snum, amt, (amt*12)/100 commision from orders;
+------+------+---------+-------------------+
| onum | snum | amt     | commision         |
+------+------+---------+-------------------+
| 3001 | 1007 |   18.69 | 2.242800064086914 |
| 3003 | 1001 |  767.19 | 92.06280029296875 |
| 3002 | 1004 |  1900.1 | 228.0119970703125 |
| 3005 | 1002 | 5160.45 |    619.2540234375 |
| 3006 | 1007 | 1098.16 | 131.7792041015625 |
| 3009 | 1003 | 1713.23 |   205.58759765625 |
| 3007 | 1002 |   75.75 |              9.09 |
| 3008 | 1001 |    4723 |            566.76 |
| 3010 | 1002 | 1309.95 |  157.193994140625 |
| 3011 | 1001 | 9891.88 |   1187.0255859375 |
+------+------+---------+-------------------+
10 rows in set (0.00 sec)

2) Write a query on the Customers table that will find the highest rating in each city. 
Put the output in this form: 
For the city (city), the highest rating is : (rating).
mysql> select city, max(rating) from customers group by city;
+----------+-------------+
| city     | max(rating) |
+----------+-------------+
| London   |         100 |
| Rome     |         200 |
| San Jose |         300 |
| Berlin   |         300 |
| Jalgaon  |         400 |
+----------+-------------+
5 rows in set (0.23 sec)

3) Write a query that lists customers in descending order of rating. Output the rating 
field first, followed by the customer’s name and number. 
mysql> select rating, cname, snum from customers order by rating desc;
+--------+----------+------+
| rating | cname    | snum |
+--------+----------+------+
|    300 | Grass    | 1002 |
|    300 | Cisneros | 1007 |
|    200 | Giovanni | 1003 |
|    200 | Liu      | 1002 |
|    100 | Hoffman  | 1001 |
|    100 | Clemens  | 1001 |
|    100 | Pereira  | 1004 |
+--------+----------+------+
7 rows in set (0.09 sec)

4) Write a query that totals the orders for each day and places the results in 
descending order.
mysql> select count(odate), odate from orders group by odate order by count(odate);
+--------------+------------+
| count(odate) | odate      |
+--------------+------------+
|            1 | 1990-10-05 |
|            2 | 1990-10-04 |
|            2 | 1990-10-06 |
|            5 | 1990-10-03 |
+--------------+------------+
4 rows in set (0.11 sec)

---------------------------------------------------------------
Assignment : 9
---------------------------------------------------------------

1) Write a query that lists each order number followed by the name of the customer 
who made the order. 
mysql> select onum, cname from orders ord, customers cme where cme.cnum = ord.cnum;
+------+----------+
| onum | cname    |
+------+----------+
| 3001 | Cisneros |
| 3003 | Hoffman  |
| 3002 | Pereira  |
| 3005 | Liu      |
| 3006 | Cisneros |
| 3009 | Giovanni |
| 3007 | Grass    |
| 3008 | Clemens  |
| 3010 | Grass    |
| 3011 | Clemens  |
+------+----------+
10 rows in set (0.10 sec)

2) Write a query that gives the names of both the salesperson and the customer for 
each order along with the order number. 
mysql> select cname, sname from salespeople sal, customers cme where sal.snum = cme.snum;
+----------+---------+
| cname    | sname   |
+----------+---------+
| Hoffman  | Peel    |
| Giovanni | Axelrod |
| Liu      | Serres  |
| Grass    | Serres  |
| Clemens  | Peel    |
| Cisneros | Rifkin  |
| Pereira  | Motika  |
+----------+---------+
7 rows in set (0.00 sec)

3) Write a query that produces all customers serviced by salespeople with a 
commission above 12%. Output the customer’s name, the salesperson’s name, 
and the salesperson’s rate of commission. 
mysql> select cname,sal.snum, comm*100 from customers cme, salespeople sal where cme.snum = cme.snum AND comm >.12;
+----------+------+--------------------+
| cname    | snum | comm*100           |
+----------+------+--------------------+
| Pereira  | 1002 | 12.999999523162842 |
| Cisneros | 1002 | 12.999999523162842 |
| Clemens  | 1002 | 12.999999523162842 |
| Grass    | 1002 | 12.999999523162842 |
| Liu      | 1002 | 12.999999523162842 |
| Giovanni | 1002 | 12.999999523162842 |
| Hoffman  | 1002 | 12.999999523162842 |
| Pereira  | 1007 | 15.000000596046448 |
| Cisneros | 1007 | 15.000000596046448 |
| Clemens  | 1007 | 15.000000596046448 |
| Grass    | 1007 | 15.000000596046448 |
| Liu      | 1007 | 15.000000596046448 |
| Giovanni | 1007 | 15.000000596046448 |
| Hoffman  | 1007 | 15.000000596046448 |
+----------+------+--------------------+
14 rows in set (0.00 sec)

4) Write a query that calculates the amount of the salesperson’s commission on each 
order by a customer with a rating above 100. 
mysql> select amt, comm from salespeople join customers using(snum) join ord
ers using(snum) where rating>100;
+---------+------+
| amt     | comm |
+---------+------+
|   18.69 | 0.15 |
| 5160.45 | 0.13 |
| 5160.45 | 0.13 |
| 1098.16 | 0.15 |
| 1713.23 |  0.1 |
|   75.75 | 0.13 |
|   75.75 | 0.13 |
| 1309.95 | 0.13 |
| 1309.95 | 0.13 |
+---------+------+
9 rows in set (0.00 sec)

---------------------------------------------------------------
Assignment : 10
---------------------------------------------------------------

1) Write a query that produces all pairs of salespeople who are living in the same 
city.  Exclude combinations of salespeople with themselves as well as duplicate 
rows with the order reversed. 
mysql> select x.sname, y.sname, x.city from salespeople x, salespeople y whe
re x.city=y.city AND x.sname<y.sname;
+--------+-------+--------+
| sname  | sname | city   |
+--------+-------+--------+
| Motika | Peel  | London |
+--------+-------+--------+
1 row in set (0.00 sec)

2) Write a query that produces the names and cities of all customers with the same 
rating as Hoffman. 
mysql> select cname, city from customers where rating =(select rating from customers where cname='hoffman');
+---------+--------+
| cname   | city   |
+---------+--------+
| Hoffman | London |
| Clemens | London |
| Pereira | Rome   |
+---------+--------+
3 rows in set (0.00 sec)

---------------------------------------------------------------
Assignment : 11
---------------------------------------------------------------

1) Write a query that uses a subquery to obtain all orders for the customer named 
Cisneros. Assume you do not know his customer number (cnum). 
mysql> select onum, cnum from orders where cnum=(select cnum from customers
where cname ='Cisneros');
+------+------+
| onum | cnum |
+------+------+
| 3001 | 2008 |
| 3006 | 2008 |
+------+------+
2 rows in set (0.00 sec)

2) Write a query that produces the names and ratings of all customers who have 
above-average orders. 
mysql> select cname, rating from customers where cnum in (select cnum from o
rders where amt > (select avg(amt) from orders));
+---------+--------+
| cname   | rating |
+---------+--------+
| Liu     |    200 |
| Clemens |    100 |
+---------+--------+
2 rows in set (0.45 sec)

3) Write a query that selects the total amount in orders for each salesperson for 
whom this total is greater than the amount of the largest order in the table. 
mysql> select sum(amt) from orders group by snum having sum(amt)>(select max
(amt)from orders);
+--------------------+
| sum(amt)           |
+--------------------+
| 15382.069885253906 |
+--------------------+
1 row in set (0.00 sec)

---------------------------------------------------------------
Assignment : 12
---------------------------------------------------------------

1) Write a query that selects all customers whose ratings are equal to or greater than 
ANY of Serres’.  
mysql> select * from customers where rating >= any (select rating from customers where 
snum in (select snum from salespeople where sname = 'serres'));
+------+----------+----------+--------+------+
| Cnum | Cname    | City     | Rating | Snum |
+------+----------+----------+--------+------+
| 2002 | Giovanni | Rome     |    200 | 1003 |
| 2003 | Liu      | San Jose |    200 | 1002 |
| 2004 | Grass    | Berlin   |    300 | 1002 |
| 2008 | Cisneros | San Jose |    300 | 1007 |
+------+----------+----------+--------+------+
4 rows in set (0.01 sec)

2) Write a query using ANY or ALL that will find all salespeople who have no 
customers located in their city.  
mysql> select snum from salespeople where (snum, city) not in (select snum, city from customers);
+------+
| snum |
+------+
| 1004 |
| 1007 |
| 1003 |
+------+
3 rows in set (0.00 sec)

3) Write a query that selects all orders for amounts greater than any for the 
customers in London.  
mysql> select * from orders where amt>any(select amt from orders where cnum in
(select cnum from customers where city = 'london'));
+------+---------+------------+------+------+
| Onum | Amt     | Odate      | Cnum | Snum |
+------+---------+------------+------+------+
| 3002 |  1900.1 | 1990-10-03 | 2007 | 1004 |
| 3005 | 5160.45 | 1990-10-03 | 2003 | 1002 |
| 3006 | 1098.16 | 1990-10-03 | 2008 | 1007 |
| 3009 | 1713.23 | 1990-10-04 | 2002 | 1003 |
| 3008 |    4723 | 1990-10-05 | 2006 | 1001 |
| 3010 | 1309.95 | 1990-10-06 | 2004 | 1002 |
| 3011 | 9891.88 | 1990-10-06 | 2006 | 1001 |
+------+---------+------------+------+------+
7 rows in set (0.00 sec)

4) Write the above query using MIN or MAX.  
mysql> select * from orders where amt> (select min(amt)from customers natural join orders where city='london');
+------+---------+------------+------+------+
| Onum | Amt     | Odate      | Cnum | Snum |
+------+---------+------------+------+------+
| 3002 |  1900.1 | 1990-10-03 | 2007 | 1004 |
| 3005 | 5160.45 | 1990-10-03 | 2003 | 1002 |
| 3006 | 1098.16 | 1990-10-03 | 2008 | 1007 |
| 3009 | 1713.23 | 1990-10-04 | 2002 | 1003 |
| 3008 |    4723 | 1990-10-05 | 2006 | 1001 |
| 3010 | 1309.95 | 1990-10-06 | 2004 | 1002 |
| 3011 | 9891.88 | 1990-10-06 | 2006 | 1001 |
+------+---------+------------+------+------+
7 rows in set (0.00 sec)

---------------------------------------------------------------
Assignment : 13
---------------------------------------------------------------

1) Create a union of two queries that shows the names, cities, and ratings of all 
customers. Those with rating of 200 or greater will also have the words “High 
Rating”, while the others will have the words “Low Rating”. 
mysql> SELECT cname, city, 'High Rating' rating from customers WHERE rating>200
    ->     UNION
    ->     SELECT cname, city, 'Low Rating' rating from customers WHERE rating <=200;
+----------+----------+-------------+
| cname    | city     | rating      |
+----------+----------+-------------+
| Grass    | Berlin   | High Rating |
| Cisneros | San Jose | High Rating |
| Hoffman  | London   | Low Rating  |
| Giovanni | Rome     | Low Rating  |
| Liu      | San Jose | Low Rating  |
| Clemens  | London   | Low Rating  |
| Pereira  | Rome     | Low Rating  |
+----------+----------+-------------+
7 rows in set (0.00 sec)

2) Write a command that produces the name and number of each salesperson and 
each customer with more than one current order. Put the results in alphabetical 
order.
mysql> SELECT sname, snum, cname from salespeople
    -> JOIN customers using(snum)
    -> where snum IN
    -> (select snum from customers group by snum having count(snum)>1)
    -> ORDER BY sname, cname;
+--------+------+---------+
| sname  | snum | cname   |
+--------+------+---------+
| Peel   | 1001 | Clemens |
| Peel   | 1001 | Hoffman |
| Serres | 1002 | Grass   |
| Serres | 1002 | Liu     |
+--------+------+---------+
4 rows in set (0.00 sec)

3) Form a union of three queries. Have the first select the snums of all salespeople in 
San Jose; the second, the cnums of all customers in San Jose; and the third the 
onums of all orders on October 3. Retain duplicates between the last two queries 
but eliminate any redundancies between either of them and the first.  
(Note: in the sample tables as given, there would be no such redundancy. This is 
besides the point.) 
mysql> select snum from salespeople where city ='san Jose' UNION select distinct snum from 
	orders where snum in(select snum from orders where odate like '03-OCT-%');
+------+
| snum |
+------+
| 1002 |
+------+
1 row in set (0.37 sec)

---------------------------------------------------------------
Assignment : 14
---------------------------------------------------------------

1) Write a command that puts the following values, in their given order, into the 
salespeople table: city – San Jose, name – Blanco, comm – NULL, cnum – 1100. 
mysql> INSERT INTO salespeople (city,sname,comm,snum) values('San Jose', 'Blanco', NULL, 1100);
Query OK, 1 row affected (0.42 sec)

mysql> select * from salespeople;
+------+---------+-----------+------+
| Snum | Sname   | City      | Comm |
+------+---------+-----------+------+
| 1001 | Peel    | London    | 0.12 |
| 1002 | Serres  | San Jose  | 0.13 |
| 1004 | Motika  | London    | 0.11 |
| 1007 | Rifkin  | Barcelona | 0.15 |
| 1003 | Axelrod | New York  |  0.1 |
| 1100 | Blanco  | San Jose  | NULL |
+------+---------+-----------+------+
6 rows in set (0.00 sec)

2) Write a command that removes all orders from customer Clemens from the 
Orders table. 
mysql> delete from orders where cnum in(select cnum from customers where cname = 'Clemens');
Query OK, 2 rows affected (0.58 sec)

mysql> select * from orders;
+------+---------+------------+------+------+
| Onum | Amt     | Odate      | Cnum | Snum |
+------+---------+------------+------+------+
| 3001 |   18.69 | 1990-10-03 | 2008 | 1007 |
| 3003 |  767.19 | 1990-10-03 | 2001 | 1001 |
| 3002 |  1900.1 | 1990-10-03 | 2007 | 1004 |
| 3005 | 5160.45 | 1990-10-03 | 2003 | 1002 |
| 3006 | 1098.16 | 1990-10-03 | 2008 | 1007 |
| 3009 | 1713.23 | 1990-10-04 | 2002 | 1003 |
| 3007 |   75.75 | 1990-10-04 | 2004 | 1002 |
| 3010 | 1309.95 | 1990-10-06 | 2004 | 1002 |
+------+---------+------------+------+------+
8 rows in set (0.00 sec)

3) Write a command that increases the rating of all customers in Rome by 100. 
mysql> update customers set rating=rating+100;
Query OK, 7 rows affected (0.15 sec)
Rows matched: 7  Changed: 7  Warnings: 0

mysql> select * from customers;
+------+----------+----------+--------+------+
| Cnum | Cname    | City     | Rating | Snum |
+------+----------+----------+--------+------+
| 2001 | Hoffman  | London   |    200 | 1001 |
| 2002 | Giovanni | Rome     |    300 | 1003 |
| 2003 | Liu      | San Jose |    300 | 1002 |
| 2004 | Grass    | Berlin   |    400 | 1002 |
| 2006 | Clemens  | London   |    200 | 1001 |
| 2008 | Cisneros | San Jose |    400 | 1007 |
| 2007 | Pereira  | Rome     |    200 | 1004 |
+------+----------+----------+--------+------+
7 rows in set (0.00 sec)

4) Salesperson Serres has left the company. Assign her customers to Motika. 
mysql> update customers set snum = (select snum from salespeople where sname='serres') 
where snum = (select snum from salespeople where sname = 'Motika');
Query OK, 1 row affected (0.20 sec)
Rows matched: 1  Changed: 1  Warnings: 0

---------------------------------------------------------------
Assignment : 15
---------------------------------------------------------------

1) Assume there is a table called Multicust, with all of the same column definitions 
as Salespeople. Write a command that inserts all salespeople with more than one 
customer into this table. 
mysql> CREATE TABLE Multicast AS
    -> SELECT * FROM salespeople
    -> WHERE snum IN (SELECT snum FROM customers GROUP BY snum HAVING count(snum)>1);
Query OK, 2 rows affected (1.03 sec)
Records: 2  Duplicates: 0  Warnings: 0

mysql> select * from multicast;
+------+--------+----------+------+
| Snum | Sname  | City     | Comm |
+------+--------+----------+------+
| 1001 | Peel   | London   | 0.12 |
| 1002 | Serres | San Jose | 0.13 |
+------+--------+----------+------+
2 rows in set (0.00 sec)

2) Write a command that deletes all customers with no current orders. 
mysql> insert into customers values(2009, 'Kajal', 'Jalgaon', 400, 1004);
Query OK, 1 row affected (0.16 sec)

mysql> select * from customers;
+------+----------+----------+--------+------+
| Cnum | Cname    | City     | Rating | Snum |
+------+----------+----------+--------+------+
| 2001 | Hoffman  | London   |    100 | 1001 |
| 2002 | Giovanni | Rome     |    200 | 1003 |
| 2003 | Liu      | San Jose |    200 | 1002 |
| 2004 | Grass    | Berlin   |    300 | 1002 |
| 2006 | Clemens  | London   |    100 | 1001 |
| 2008 | Cisneros | San Jose |    300 | 1007 |
| 2007 | Pereira  | Rome     |    100 | 1002 |
| 2009 | Kajal    | Jalgaon  |    400 | 1004 |
+------+----------+----------+--------+------+
8 rows in set (0.00 sec)

mysql> delete customers WHERE cnum=ANY (select cnum from orders where cnum NOT IN(select cnum from customers));

3) Write a command that increases by twenty percent the commissions of all 
salespeople with total orders above Rs. 3,000. 
mysql> update salespeople set comm=comm*1.20 where snum IN (select snum from orders where amt>300);
Query OK, 5 rows affected (0.28 sec)
Rows matched: 5  Changed: 5  Warnings: 0

mysql> select * from salespeople;
+------+---------+-----------+-------+
| Snum | Sname   | City      | Comm  |
+------+---------+-----------+-------+
| 1001 | Peel    | London    | 0.144 |
| 1002 | Serres  | San Jose  | 0.156 |
| 1004 | Motika  | London    | 0.132 |
| 1007 | Rifkin  | Barcelona |  0.18 |
| 1003 | Axelrod | New York  |  0.12 |
| 1100 | Blanco  | San Jose  |  NULL |
+------+---------+-----------+-------+
6 rows in set (0.00 sec)

---------------------------------------------------------------
Assignment : 16
---------------------------------------------------------------

1) Write a command that will enable a user to pull orders grouped by date out of the 
Orders table quickly. 
mysql> CREATE INDEX d_order ON orders(odate);
Query OK, 0 rows affected (1.88 sec)
Records: 0  Duplicates: 0  Warnings: 0

2) If the Orders table has already been created, how can you force the onum field to 
be unique (assume all current values are unique)? 
mysql> ALTER TABLE orders MODIFY onum CONSTRAINT on PRIMARY KEY;

3) Create an index that would permit each salesperson to retrieve his or her orders 
grouped by date quickly. 
mysql> create INDEX I_DATE on orders(odate);
Query OK, 0 rows affected, 1 warning (0.34 sec)
Records: 0  Duplicates: 0  Warnings: 1

4) Let us assume that each salesperson is to have only one customer of a given 
rating, and that this is currently the case. Enter a command that enforces it. 
mysql> ALTER TABLE customers MODIFY rating PRIMARY KEY;
